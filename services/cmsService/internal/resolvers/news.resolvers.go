package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.60

import (
	"context"
	"younified-backend/contracts/cms/model"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateNews is the resolver for the createNews field.
func (r *mutationResolver) CreateNews(ctx context.Context, unionID primitive.ObjectID, input model.News, images []*string, documents []*model.Document, category string) (*model.News, error) {
	return r.CMSController.CreateNews(ctx, unionID, input, images, documents, category)
}

// DeleteNews is the resolver for the deleteNews field.
func (r *mutationResolver) DeleteNews(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID) (*string, error) {
	return r.CMSController.DeleteNews(ctx, unionID, newsID)
}

// NewComment is the resolver for the newComment field.
func (r *mutationResolver) AddComment(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, comment model.Comment) (*model.Comment, error) {
	return r.CMSController.AddComment(ctx, unionID, newsID, comment)
}

// LikeNewsItem is the resolver for the likeNewsItem field.
func (r *mutationResolver) LikeNewsItem(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, userID primitive.ObjectID) (*model.News, error) {
	return r.CMSController.LikeNewsItem(ctx, unionID, newsID, userID)
}

// LikeComment is the resolver for the likeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, commentID primitive.ObjectID, userID primitive.ObjectID) (*model.Comment, error) {
	return r.CMSController.LikeComment(ctx, unionID, newsID, commentID, userID)
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, commentID primitive.ObjectID) (*string, error) {
	return r.CMSController.DeleteComment(ctx, unionID, newsID, commentID)
}

// PinNewsPost is the resolver for the pinNewsPost field.
func (r *mutationResolver) PinNewsPost(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID) (*model.News, error) {
	return r.CMSController.PinNewsPost(ctx, unionID, newsID)
}

// ShowPin is the resolver for the showPin field.
func (r *mutationResolver) ShowPin(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, show bool) (*model.News, error) {
	return r.CMSController.ShowPinOption(ctx, unionID, newsID, show)
}

// MakePrivate is the resolver for the makePrivate field.
func (r *mutationResolver) MakePrivate(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, private bool) (*model.News, error) {
	return r.CMSController.MakeNewsPrivate(ctx, unionID, newsID, private)
}

// UpdateLikeDisplay is the resolver for the updateLikeDisplay field.
func (r *mutationResolver) LikeButtonToggle(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, likeDisplay bool) (*model.News, error) {
	return r.CMSController.LikeButtonToggle(ctx, unionID, newsID, likeDisplay)
}

// UpdateCommentDisplay is the resolver for the updateCommentDisplay field.
func (r *mutationResolver) CommentButtonToggle(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, commentDisplay bool) (*model.News, error) {
	return r.CMSController.CommentButtonToggle(ctx, unionID, newsID, commentDisplay)
}

// NewsFeed is the resolver for the newsFeed field.
func (r *queryResolver) GetAllNewsPosts(ctx context.Context, unionID primitive.ObjectID, page int, limit int) (*model.Report, error) {
	return r.CMSController.GetAllNewsPosts(ctx, unionID, page, limit)
}

// GetComments is the resolver for the getComments field.
func (r *queryResolver) GetComments(ctx context.Context, unionID primitive.ObjectID, newsID primitive.ObjectID, page int, limit int) ([]*model.Comment, error) {
	return r.CMSController.GetComments(ctx, unionID, newsID, page, limit)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
