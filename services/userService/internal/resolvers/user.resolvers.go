package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"younified-backend/contracts/user/model"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.User) (*model.User, error) {
	return r.UserController.CreateMember(ctx, input)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.User) (*model.User, error) {
	return r.UserController.CreateUser(ctx, input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.Credential, device *string) (*model.SingleUserAuth, error) {
	return r.UserController.Login(ctx, input, device)
}

// ApproveUser is the resolver for the approveUser field.
func (r *mutationResolver) ApproveUser(ctx context.Context, unionID primitive.ObjectID, memberID primitive.ObjectID) (*model.User, error) {
	return r.UserController.ApproveUser(ctx, unionID, memberID)
}

// UploadUsers is the resolver for the uploadUsers field.
func (r *mutationResolver) UploadUsers(ctx context.Context, unionID primitive.ObjectID, input []*model.User) (*string, error) {
	return r.UserController.UploadUsers(ctx, unionID, input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id primitive.ObjectID, unionID primitive.ObjectID, input model.UserUpdateInput) (*model.User, error) {
	return r.UserController.UpdateUser(ctx, id, unionID, input)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id primitive.ObjectID, unionID primitive.ObjectID) (string, error) {
	return r.UserController.DeleteUser(ctx, id, unionID)
}

// RestoreUser is the resolver for the restoreUser field.
func (r *mutationResolver) RestoreUser(ctx context.Context, id primitive.ObjectID, unionID primitive.ObjectID) (string, error) {
	return r.UserController.RestoreUser(ctx, id, unionID)
}

// RequestPasswordReset is the resolver for the requestPasswordReset field.
func (r *mutationResolver) RequestPasswordReset(ctx context.Context, unionID primitive.ObjectID, username *string) (*string, error) {
	return r.UserController.ResetPasswordRequest(ctx, unionID, *username)
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, unionID primitive.ObjectID, resetKey *string, password *string) (*string, error) {
	return r.UserController.ResetPassword(ctx, unionID, resetKey, password)
}

// LoginWithToken is the resolver for the loginWithToken field.
func (r *queryResolver) LoginWithToken(ctx context.Context, token *string) (*model.SingleUserAuth, error) {
	return r.UserController.LoginWithToken(ctx, token)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id primitive.ObjectID, unionID primitive.ObjectID) (*model.User, error) {
	return r.UserController.User(ctx, id, unionID)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, filter *model.UserFilterInput, page *int, limit *int) ([]*model.User, error) {
	return r.UserController.Users(ctx, filter, *page, *limit)
}

// UserCount is the resolver for the userCount field.
func (r *queryResolver) UserCount(ctx context.Context, filter *model.UserFilterInput) (int64, error) {
	return r.UserController.UserCount(ctx, filter)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
